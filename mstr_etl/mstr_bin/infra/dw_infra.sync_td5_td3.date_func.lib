#!/usr/bin/ksh

typeset -fu yeardays
typeset -fu monthdays
typeset -fu ymd2yd
typeset -fu juldif
typeset -fu grgdif
typeset -fu conv_dt


#This contains functions for date manipulations. 
# yeardays 
# function to return the number of days in a year 
# usage yeardays yyyy 
function yeardays 
{ 
y=$1 
a=`expr $y % 4` 
if [[ $a = 0 ]]; then 
echo 366 
else 
echo 365 
fi 
} 


# monthdays 
# calculates the number of days in a month 
# usage monthdays yyyy mm 
function monthdays 
{ 

ymd=`expr \( $1 \* 10000 \) + \( $2 \* 100 \) + 1` 
# extract the year and the month 
y=`expr $ymd / 10000` ; 
m=`expr \( $ymd % 10000 \) / 100` ; 
case $m in 
1|3|5|7|8|10|12) echo 31 ; exit ;; 
4|6|9|11) echo 30 ; exit ;; 
*) ;; 
esac 


# except for month 2 which depends on whether the year is a leap year 
# Use yeardays to get the number of days in the year and return a value 

diy=`yeardays $y` 
case $diy in 
365) echo 28 ; exit ;; 
366) echo 29 ; exit ;; 
esac 
} 


# ymd2yd converts yyyymmdd to yyyyddd 
# usage ymd2yd 19980429 
function ymd2yd 
{ 
dt=$1 
y=`expr $dt / 10000` 
m=`expr \( $dt % 10000 \) / 100` 
d=`expr $dt % 100` 
x=1 
while [ `expr $x \< $m` = 1 ] 
do 
md=`monthdays $y $x` 
d=`expr $d + $md` 
x=`expr $x \+ 1` 
done 
# combine the year and day back together again and you have the julian date. 
jul=`expr \( $y \* 1000 \) + $d` 
echo $jul 
} 


#calculates the days difference between two dates and reports 
#usage juldif jul1 jul2 
function juldif 
{ 
if [[ `expr $1 \< $2` = 1 ]]; then 
jul1=$2 
jul2=$1 
else 
jul1=$1 
jul2=$2 
fi 
# Break the dates in to year and day portions 
yyyy1=`expr $jul1 / 1000` 
yyyy2=`expr $jul2 / 1000` 
ddd1=`expr $jul1 % 1000` 
ddd2=`expr $jul2 % 1000` 

# Subtract days 
res=`expr $ddd1 - $ddd2` 

# Then add days in year until year2 matches year1 
while [ `expr $yyyy2 \< $yyyy1` = 1 ] 
do 
diy=`yeardays $yyyy2` 
res=`expr $res + $diy` 
yyyy2=`expr $yyyy2 + 1` 
done 

# if argument 2 was larger than argument 1 then 
# the arguments were reversed before calculating 
# adjust by reversing the sign 
if [ `expr $1 \< $2` = 1 ] 
then 
res=`expr $res \* -1` 
fi 

# and output the results 
echo $res 
} 

#calculates the days difference between two dates and reports 
# the number days as grg1 - grg2 
# usage grgdif grg1 grg2 
# where gregorian date is in the form yyyymmdd 
function grgdif 
{ 

grg1=$1 
grg2=$2 
jul1=`ymd2yd $grg1` 
jul2=`ymd2yd $grg2` 

# calculate the answer using juldif 
res=`juldif $jul1 $jul2` 

# and output the results 
echo $res 
} 

function conv_dt {
############################################################################
# Function converts printed date to yyyymmdd
# Feb 7 04:03 = 20120207
# Jun 25 2011 = 20110625
############################################################################
if [ $# -ne 3 ]
then
  echo "USAGE: must take 3 parameters"
  return 1
fi

_mo=$1
_dy=$2
_yr=$3

if [[ "$_mo" = "Jan" ]]; then
  _mo="01"
elif [[ "$_mo" = "Feb" ]]; then
  _mo="02"
elif [[ "$_mo" = "Mar" ]]; then
  _mo="03"
elif [[ "$_mo" = "Apr" ]]; then
  _mo="04"
elif [[ "$_mo" = "May" ]]; then
  _mo="05"
elif [[ "$_mo" = "Jun" ]]; then
  _mo="06"
elif [[ "$_mo" = "Jul" ]]; then
  _mo="07"
elif [[ "$_mo" = "Aug" ]]; then
  _mo="08"
elif [[ "$_mo" = "Sep" ]]; then
  _mo="09"
elif [[ "$_mo" = "Oct" ]]; then
  _mo="10"
elif [[ "$_mo" = "Nov" ]]; then
  _mo="11"
elif [[ "$_mo" = "Dec" ]]; then
  _mo="12"
else
  return 1
fi

if [[ $_dy -lt 10 ]]; then
  _dy="0$_dy"
fi

# Check char length, if true means the year is in the last 12 months
# Better checks could be done, but this is for a one-time conversion
cnt=$(echo $_yr | wc -c)
if [[ $cnt -eq 6 ]]; then
  # Check if the month is greater than current
  _curr_mo=$(date '+%m')
  _curr_yr=$(date '+%Y')
  if [[ $_curr_mo -lt $_mo ]]; then
    ((_yr=$_curr_yr-1))
  else
    _yr=$_curr_yr
  fi
fi

echo $_yr$_mo$_dy

return 0
}

