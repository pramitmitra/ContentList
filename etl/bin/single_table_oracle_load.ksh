#! /bin/ksh
# Script generated by software licensed from Ab Initio Software Corporation.
# Use and disclosure are subject to Ab Initio confidentiality and license terms.
export AB_HOME;AB_HOME=${AB_HOME:-/usr/local/abinitio}
export MPOWERHOME;MPOWERHOME="$AB_HOME"
export PATH
typeset _ab_uname=`uname`
case "$_ab_uname" in
Windows_* )
    PATH="$AB_HOME/bin;$PATH" ;;
CYGWIN_* )
    PATH="`cygpath "$AB_HOME"`/bin:/usr/local/bin:/usr/bin:/bin:$PATH" ;;
* )
    PATH="$AB_HOME/bin:$PATH" ;;
esac
unset ENV
export AB_REPORT;AB_REPORT=${AB_REPORT:-'monitor=300 processes scroll=true'}
unset GDE_EXECUTION

export AB_COMPATIBILITY;AB_COMPATIBILITY=2.14.53

# Deployed execution script for graph "single_table_oracle_load", compiled at Friday, July 28, 2006 19:36:38 using GDE version 1.13.11
export AB_JOB;AB_JOB=${AB_JOB_PREFIX:-""}single_table_oracle_load
# Begin Ab Initio shell utility functions

: ${_ab_uname:=$(uname)}

function __AB_INVOKE_PROJECT
{
  typeset _AB_PROJECT_KSH="$1" ; shift
  typeset _AB_PROJECT_DIR="$1" ; shift
  typeset _AB_DEFINE_OR_EXECUTE="$1" ; shift
  typeset _AB_START_OR_END="$1" ; shift
   . "$_AB_PROJECT_KSH" "$_AB_PROJECT_DIR" "$_AB_DEFINE_OR_EXECUTE" "$_AB_START_OR_END"  "$@"
}

function __AB_DOTIT
{
   .  "$@"
}

function __AB_QUOTEIT {
  typeset queue q qq qed lotsaqs s trail
  q="'"
  qq='"'
  if [ X"$1" = X"" ] ; then
    print $q$q
    return
  fi
  queue=${1%$q}
  if [ X"$queue" != X"$1" ] ; then
    trail="${qq}${q}${qq}" 
  else 
    trail=""
  fi
  lotsaqs=${q}${qq}${q}${qq}${q}
  oldIFS="$IFS"
  IFS=$q
  set -- $queue
  IFS="$oldIFS"
  print -rn "$q$1"
  shift
  for s; do
    print -rn "$lotsaqs$s"
  done
  print -r $q$trail
}

function __AB_dirname {
    case $_ab_uname in
    Windows_* | CYGWIN_* )
        typeset d='' p="$1"
        # Strip drive letter colon, if present, and put it into d.
        case $p in
        [A-Za-z]:* )
            d=${p%%:*}:
            p=${p#??}
            ;;
        esac
        # Remove trailing separators, though not the last character in the
        # pathname.
        while : true; do
            case $p in
            ?*[/\\] )
                p=${p%[/\\]} ;;
            * )
                break ;;
            esac
        done
        if [[ "$p" = ?*[/\\]* ]] ; then
            print -r -- "$d${p%[/\\]*}"
        elif [[ "$p" = [/\\]* ]] ; then
            print "$d/"
        else
            print "$d." 
        fi
        ;;
    * ) # Unix
        typeset p="$1"
        # Remove trailing separators, though not the last character in the
        # pathname.
        while : true; do
            case $p in
            ?*/ )
                p="${p%/}" ;;
            * )
                break ;;
            esac
        done
        case $p in
        ?*/* )
            print -r -- "${p%/*}" ;;
        /* )
            print / ;;
        * )
            print . ;;
        esac
        ;;
    esac
}

function __AB_concat_pathname {
    case $_ab_uname in
    Windows_* | CYGWIN_* )
        # Does not handle all cases of concatenating partially absolute
        # pathnames, those with only one of a drive letter or an initial
        # separator.
        case $2 in
        [/\\]* | [A-Za-z]:* )
            print -r -- "$2"
            ;;
        * )
            case $1 in
            # Assume that empty string means ".".  Avoid adding a
            # redundant separator.
            '' | *[/\\] )
                print -r -- "$1$2" ;;
            * )
                print -r -- "$1/$2" ;;
            esac
            ;;
        esac
        ;;
    * ) # Unix
        case $2 in
        /* )
            print -r -- "$2"
            ;;
        * )
            case $1 in
            # Assume that empty string means ".".  Avoid adding a
            # redundant separator.
            '' | */ )
                print -r -- "$1$2" ;;
            * )
                print -r -- "$1/$2" ;;
            esac
            ;;
        esac
        ;;
    esac
}

function __AB_COND {
if [ X"$1" = X0  -o X"$1" = Xfalse -o X"$1" = XFalse -o X"$1" = XF -o X"$1" = Xf ] ; then
  print "0"
else
  print "1"
fi
}

# End Ab Initio shell utility functions
export AB_GRAPH_NAME;AB_GRAPH_NAME=single_table_oracle_load

# Host Setup Commands:
. /home/abinitio/cfg/abinitio.setup
_AB_PROXY_DIR=single_table_oracle_load-ProxyDir-$$
rm -rf "${_AB_PROXY_DIR}"
mkdir "${_AB_PROXY_DIR}"
print -r -- "" > "${_AB_PROXY_DIR}"'/GDE-Parameters'
function __AB_CLEANUP_PROXY_FILES
{
   rm -rf "${_AB_PROXY_DIR}"
   rm -rf "${AB_EXTERNAL_PROXY_DIR}"
   return
}
trap '__AB_CLEANUP_PROXY_FILES' EXIT
# Work around pdksh bug: the EXIT handler is not executed upon a signal.
trap '_AB_status=$?; __AB_CLEANUP_PROXY_FILES; exit $_AB_status' HUP INT QUIT TERM
if [ $# -gt 0 -a X"$1" = X"-help" ]; then
print -r -- 'Usage: single_table_oracle_load.ksh <ETL_ID> <JOB_ENV> <INPUT_DML_FILENAME>'
exit 1
fi

# Command Line Processing
function _AB_PARSE_ARGUMENTS {
   unset ETL_ID
   unset JOB_ENV
   unset INPUT_DML_FILENAME
   _ab_index_var=0
   if [ $# -gt 0 ]; then
      export ETL_ID;      ETL_ID="${1}"
      let _ab_index_var=_ab_index_var+1
      _AB_USED_ARGUMENTS[_ab_index_var]=1
      shift
   fi
   if [ $# -gt 0 ]; then
      export JOB_ENV;      JOB_ENV="${1}"
      let _ab_index_var=_ab_index_var+1
      _AB_USED_ARGUMENTS[_ab_index_var]=1
      shift
   fi
   if [ $# -gt 0 ]; then
      export INPUT_DML_FILENAME;      INPUT_DML_FILENAME="${1}"
      let _ab_index_var=_ab_index_var+1
      _AB_USED_ARGUMENTS[_ab_index_var]=1
      shift
   fi
   while [ $# -gt 0 ]; do
   _ab_kwd="${1}"
   let _ab_index_var=_ab_index_var+1
   shift
   case ${_ab_kwd} in
   * )
      if [ X"${_AB_USED_ARGUMENTS[_ab_index_var]}" != X1 ]; then
         print -r -- 'Unexpected command line argument found: '"${_ab_kwd}"
         print -r -- 'Usage: single_table_oracle_load.ksh <ETL_ID> <JOB_ENV> <INPUT_DML_FILENAME>'
         exit 1
      fi
   esac
   done
}
_AB_PARSE_ARGUMENTS "$@"

if [ X"${ETL_ID:-}" = X"" ]; then
   print -r -- 'Required parameter ETL_ID undefined'
   print -r -- 'Usage: single_table_oracle_load.ksh <ETL_ID> <JOB_ENV> <INPUT_DML_FILENAME>'
   exit 1
fi

if [ X"${JOB_ENV:-}" = X"" ]; then
   print -r -- 'Required parameter JOB_ENV undefined'
   print -r -- 'Usage: single_table_oracle_load.ksh <ETL_ID> <JOB_ENV> <INPUT_DML_FILENAME>'
   exit 1
fi
export INPUT_DML_FILENAME;INPUT_DML_FILENAME=${INPUT_DML_FILENAME:-"$ETL_ID"'.read.dml'}
export ETL_CFG_FILE;ETL_CFG_FILE="$DW_CFG"'/'"$ETL_ID"'.cfg'
export SUBJECT_AREA;SUBJECT_AREA="${ETL_ID%%.*}"
export TABLE_ID;TABLE_ID="${ETL_ID##*.}"
export AB_JOB;AB_JOB=$(if [ $ETL_ENV ]
then
   print $AB_JOB.$ETL_ID.$ETL_ENV.$JOB_ENV
else
   print $AB_JOB.$ETL_ID.$JOB_ENV
fi)
mpjret=$?
if [ 0 -ne $mpjret ] ; then
   print -- Error evaluating: 'parameter AB_JOB of single_table_oracle_load', interpretation 'shell'
   exit $mpjret
fi
export DB_NAME;DB_NAME=$(JOB_ENV_UPPER=$(print $JOB_ENV | tr [:lower:] [:upper:])
  eval print \$DW_${JOB_ENV_UPPER}_DB)
mpjret=$?
if [ 0 -ne $mpjret ] ; then
   print -- Error evaluating: 'parameter DB_NAME of single_table_oracle_load', interpretation 'shell'
   exit $mpjret
fi
export AB_IDB_CONFIG;AB_IDB_CONFIG='oracle_'"${DB_NAME}"'.dbc'
export TNS_NAME;TNS_NAME=$(grep "^db_name\>" $DW_DBC/$AB_IDB_CONFIG | read A TNS_NAME_TMP
  print ${TNS_NAME_TMP#@})
mpjret=$?
if [ 0 -ne $mpjret ] ; then
   print -- Error evaluating: 'parameter TNS_NAME of single_table_oracle_load', interpretation 'shell'
   exit $mpjret
fi
export ORA_USERNAME;ORA_USERNAME=$(grep "^$TNS_NAME\>" $DW_LOGINS/ora_logins.dat | read TNS_NAME ORA_USERNAME ORA_PASSWORD ; print $ORA_USERNAME)
mpjret=$?
if [ 0 -ne $mpjret ] ; then
   print -- Error evaluating: 'parameter ORA_USERNAME of single_table_oracle_load', interpretation 'shell'
   exit $mpjret
fi
export ORA_PASSWORD;ORA_PASSWORD=$(grep "^$TNS_NAME\>" $DW_LOGINS/ora_logins.dat | read TNS_NAME ORA_USERNAME ORA_PASSWORD ; print $ORA_PASSWORD)
mpjret=$?
if [ 0 -ne $mpjret ] ; then
   print -- Error evaluating: 'parameter ORA_PASSWORD of single_table_oracle_load', interpretation 'shell'
   exit $mpjret
fi
export DW_SA_ARC;DW_SA_ARC="$DW_ARC"'/'"$JOB_ENV"'/'"$SUBJECT_AREA"
export DW_SA_DAT;DW_SA_DAT="$DW_DAT"'/'"$JOB_ENV"'/'"$SUBJECT_AREA"
export DW_SA_IN;DW_SA_IN="$DW_IN"'/'"$JOB_ENV"'/'"$SUBJECT_AREA"
export DW_SA_LOG;DW_SA_LOG="$DW_LOG"'/'"$JOB_ENV"'/'"$SUBJECT_AREA"
export DW_SA_TMP;DW_SA_TMP="$DW_TMP"'/'"$JOB_ENV"'/'"$SUBJECT_AREA"
export IS_CATY;IS_CATY=$(grep "^IS_CATY\>" $ETL_CFG_FILE | read PARAM VALUE COMMENT; print $VALUE)
mpjret=$?
if [ 0 -ne $mpjret ] ; then
   print -- Error evaluating: 'parameter IS_CATY of single_table_oracle_load', interpretation 'shell'
   exit $mpjret
fi
export STAGE_DB;STAGE_DB=$(grep "^STAGE_DB\>" $ETL_CFG_FILE | read PARAM VALUE COMMENT; eval print $VALUE)
mpjret=$?
if [ 0 -ne $mpjret ] ; then
   print -- Error evaluating: 'parameter STAGE_DB of single_table_oracle_load', interpretation 'shell'
   exit $mpjret
fi
export STAGE_TABLE;STAGE_TABLE=$(grep "^STAGE_TABLE\>" $ETL_CFG_FILE | read PARAM VALUE COMMENT; print $VALUE)
mpjret=$?
if [ 0 -ne $mpjret ] ; then
   print -- Error evaluating: 'parameter STAGE_TABLE of single_table_oracle_load', interpretation 'shell'
   exit $mpjret
fi
export STAGE_TABLE27;STAGE_TABLE27="${STAGE_TABLE%${STAGE_TABLE#???????????????????????????}"'}'
export LOG_TABLE;LOG_TABLE="${STAGE_TABLE27:-${STAGE_TABLE}"'}_L'
export ERROR_TABLE;ERROR_TABLE="${STAGE_TABLE27:-${STAGE_TABLE}"'}_E'
export WORK_TABLE;WORK_TABLE="${STAGE_TABLE27:-${STAGE_TABLE}"'}_W'
export FILE_DATETIME;FILE_DATETIME=$(date '+%Y%m%d-%H%M%S')
mpjret=$?
if [ 0 -ne $mpjret ] ; then
   print -- Error evaluating: 'parameter FILE_DATETIME of single_table_oracle_load', interpretation 'shell'
   exit $mpjret
fi
export UTILITY_LOAD_TABLE_CHECK_LOGFILE;UTILITY_LOAD_TABLE_CHECK_LOGFILE="$DW_SA_LOG"'/'"$TABLE_ID"'.ld.utility_load_table_check.'"$FILE_DATETIME"'.log'
export IN_DIR;IN_DIR=$(grep "^IN_DIR\>" $ETL_CFG_FILE | read PARAM VALUE COMMENT; eval print $VALUE/$JOB_ENV/$SUBJECT_AREA)
mpjret=$?
if [ 0 -ne $mpjret ] ; then
   print -- Error evaluating: 'parameter IN_DIR of single_table_oracle_load', interpretation 'shell'
   exit $mpjret
fi
export INPUT_DML;INPUT_DML="$DW_DML"'/'"$INPUT_DML_FILENAME"
export BATCH_SEQ_NUM;BATCH_SEQ_NUM=$(( $(<$DW_SA_DAT/$TABLE_ID.load.batch_seq_num.dat) + 1))
mpjret=$?
if [ 0 -ne $mpjret ] ; then
   print -- Error evaluating: 'parameter BATCH_SEQ_NUM of single_table_oracle_load', interpretation 'shell'
   exit $mpjret
fi
export INPUT_FILE;INPUT_FILE=$( INPUT_FILE_TMP=""
   if [ $IS_CATY != 1 ]
   then   
      while read FILE_ID DBC_FILE PARALLEL_NUM TABLE_NAME DATA_FILENAME PARAM
      do
        INPUT_FILE_TMP="$INPUT_FILE_TMP $(eval print $IN_DIR/$DATA_FILENAME.$BATCH_SEQ_NUM)"
      done < $DW_CFG/$ETL_ID.sources.lis
   else
      read TABLE_NAME DATA_FILENAME PARAM < $DW_CFG/$ETL_ID.sources.lis

      while read FILE_ID DBC_FILE
      do
        INPUT_FILE_TMP="$INPUT_FILE_TMP $(eval print $IN_DIR/$DATA_FILENAME.$BATCH_SEQ_NUM)"
      done < $DW_CFG/dw_caty.sources.lis
   fi

   print $INPUT_FILE_TMP
)
mpjret=$?
if [ 0 -ne $mpjret ] ; then
   print -- Error evaluating: 'parameter INPUT_FILE of single_table_oracle_load', interpretation 'shell'
   exit $mpjret
fi
export CNDTL_PARTITION_KEY;CNDTL_PARTITION_KEY=$(grep "^CNDTL_PARTITION_KEY\>" $ETL_CFG_FILE | read PARAM VALUE COMMENT; print $VALUE)
mpjret=$?
if [ 0 -ne $mpjret ] ; then
   print -- Error evaluating: 'parameter CNDTL_PARTITION_KEY of single_table_oracle_load', interpretation 'shell'
   exit $mpjret
fi
export CNDTL_PARTITION;CNDTL_PARTITION=$([ "$CNDTL_PARTITION_KEY" != "{}" ] && print 1 || print 0)
mpjret=$?
if [ 0 -ne $mpjret ] ; then
   print -- Error evaluating: 'parameter CNDTL_PARTITION of single_table_oracle_load', interpretation 'shell'
   exit $mpjret
fi
export CNDTL_REFORMAT;CNDTL_REFORMAT=$(grep "^CNDTL_REFORMAT\>" $ETL_CFG_FILE | read PARAM VALUE COMMENT; print $VALUE)
mpjret=$?
if [ 0 -ne $mpjret ] ; then
   print -- Error evaluating: 'parameter CNDTL_REFORMAT of single_table_oracle_load', interpretation 'shell'
   exit $mpjret
fi
export WRK_DIR;WRK_DIR=$(grep "^WRK_DIR\>" $ETL_CFG_FILE | read PARAM VALUE COMMENT; eval print $VALUE/$SUBJECT_AREA)
mpjret=$?
if [ 0 -ne $mpjret ] ; then
   print -- Error evaluating: 'parameter WRK_DIR of single_table_oracle_load', interpretation 'shell'
   exit $mpjret
fi
export REFORMAT_TRANS_FILE;REFORMAT_TRANS_FILE="$DW_XFR"'/'"$ETL_ID"'.reformat.xfr'
export OUTPUT_DML;OUTPUT_DML=$(if ((CNDTL_REFORMAT))
then
   print $DW_DML/$ETL_ID.write.dml
else
   print $INPUT_DML
fi)
mpjret=$?
if [ 0 -ne $mpjret ] ; then
   print -- Error evaluating: 'parameter OUTPUT_DML of single_table_oracle_load', interpretation 'shell'
   exit $mpjret
fi
export TPUMP_MACRO_DB;TPUMP_MACRO_DB=$(grep "^TPUMP_MACRO_DB\>" $ETL_CFG_FILE | read PARAM VALUE COMMENT; eval print $VALUE)
mpjret=$?
if [ 0 -ne $mpjret ] ; then
   print -- Error evaluating: 'parameter TPUMP_MACRO_DB of single_table_oracle_load', interpretation 'shell'
   exit $mpjret
fi
export FLOAD_LOAD_SESSIONS;FLOAD_LOAD_SESSIONS=$(grep "^FLOAD_LOAD_SESSIONS\>" $ETL_CFG_FILE | read PARAM VALUE COMMENT; print $VALUE)
mpjret=$?
if [ 0 -ne $mpjret ] ; then
   print -- Error evaluating: 'parameter FLOAD_LOAD_SESSIONS of single_table_oracle_load', interpretation 'shell'
   exit $mpjret
fi
export TPUMP_LOAD_SESSIONS;TPUMP_LOAD_SESSIONS=$(grep "^TPUMP_LOAD_SESSIONS\>" $ETL_CFG_FILE | read PARAM VALUE COMMENT; print $VALUE)
mpjret=$?
if [ 0 -ne $mpjret ] ; then
   print -- Error evaluating: 'parameter TPUMP_LOAD_SESSIONS of single_table_oracle_load', interpretation 'shell'
   exit $mpjret
fi
export TPUMP_PACK_STATEMENTS;TPUMP_PACK_STATEMENTS=$(grep "^TPUMP_PACK_STATEMENTS\>" $ETL_CFG_FILE | read PARAM VALUE COMMENT; print $VALUE)
mpjret=$?
if [ 0 -ne $mpjret ] ; then
   print -- Error evaluating: 'parameter TPUMP_PACK_STATEMENTS of single_table_oracle_load', interpretation 'shell'
   exit $mpjret
fi
export LOAD_ERRLIMIT;LOAD_ERRLIMIT=$(grep "^LOAD_ERRLIMIT\>" $ETL_CFG_FILE | read PARAM VALUE COMMENT; ((VALUE+=1)); print $VALUE)
mpjret=$?
if [ 0 -ne $mpjret ] ; then
   print -- Error evaluating: 'parameter LOAD_ERRLIMIT of single_table_oracle_load', interpretation 'shell'
   exit $mpjret
fi
export RECORD_COUNT;RECORD_COUNT=$(<$DW_SA_IN/$TABLE_ID.record_count.dat.$BATCH_SEQ_NUM)
mpjret=$?
if [ 0 -ne $mpjret ] ; then
   print -- Error evaluating: 'parameter RECORD_COUNT of single_table_oracle_load', interpretation 'shell'
   exit $mpjret
fi
export FLOAD_RECORD_COUNT;FLOAD_RECORD_COUNT=$(grep "^FLOAD_RECORD_COUNT\>" $ETL_CFG_FILE | read PARAM VALUE COMMENT; print $VALUE)
mpjret=$?
if [ 0 -ne $mpjret ] ; then
   print -- Error evaluating: 'parameter FLOAD_RECORD_COUNT of single_table_oracle_load', interpretation 'shell'
   exit $mpjret
fi
export CNDTL_FLOAD;CNDTL_FLOAD=$((RECORD_COUNT>=FLOAD_RECORD_COUNT))
mpjret=$?
if [ 0 -ne $mpjret ] ; then
   print -- Error evaluating: 'parameter CNDTL_FLOAD of single_table_oracle_load', interpretation 'shell'
   exit $mpjret
fi
export LOAD_LOGFILE;LOAD_LOGFILE="$DW_SA_LOG"'/'"$TABLE_ID"'.ld.utility_load.'"$FILE_DATETIME"'.log'
export LOAD_REJFILE;LOAD_REJFILE="$DW_SA_TMP"'/'"$TABLE_ID"'.ld.utility_load.rej'
export OUTPUT_TABLE_LOGFILE;OUTPUT_TABLE_LOGFILE="$DW_SA_LOG"'/'"$TABLE_ID"'.ld.output_table.'"$FILE_DATETIME"'.log'
(
   # Parameters of Reformat
   count=1
   _AB_FILE_NAME__transform0="$REFORMAT_TRANS_FILE"
   if [ -r "${_AB_FILE_NAME__transform0}" ]; then
      transform0=$(< "${_AB_FILE_NAME__transform0}")
      mpjret=$?
      if [ 0 -ne $mpjret ] ; then
         print -- Error evaluating: 'parameter transform0 of Reformat', interpretation 'shell'
         exit $mpjret
      fi
   else
      print -r -- 'Warning: cannot read '"'""${_AB_FILE_NAME__transform0}""'"' to define parameter transform0 of Reformat'
   fi
   select=""
   reject_threshold='Abort on first reject'
   limit_keyword=0
   ramp_keyword2=0.0
   keyword_map='limit_keyword limit ramp_keyword ramp ramp_keyword2 ramp'
   output_index=""
   print -r -- "${output_index}" > "${_AB_PROXY_DIR}"'/Reformat-11.xfr'
   _AB_FILE_NAME__output_index=Reformat-11.xfr
   logging=False
   condition=$((CNDTL_PARTITION && CNDTL_REFORMAT))
   mpjret=$?
   if [ 0 -ne $mpjret ] ; then
      print -- Error evaluating: 'parameter condition of Reformat', interpretation 'shell'
      exit $mpjret
   fi
   print -rn Reformat__condition= >>${_AB_PROXY_DIR}/GDE-Parameters
   __AB_QUOTEIT "${condition}" >> ${_AB_PROXY_DIR}/GDE-Parameters
)
mpjret=$?
if [ 0 -ne $mpjret ] ; then exit $mpjret ; fi
(
   # Parameters of Reformat-1
   count=1
   _AB_FILE_NAME__transform0="$REFORMAT_TRANS_FILE"
   if [ -r "${_AB_FILE_NAME__transform0}" ]; then
      transform0=$(< "${_AB_FILE_NAME__transform0}")
      mpjret=$?
      if [ 0 -ne $mpjret ] ; then
         print -- Error evaluating: 'parameter transform0 of Reformat_1', interpretation 'shell'
         exit $mpjret
      fi
   else
      print -r -- 'Warning: cannot read '"'""${_AB_FILE_NAME__transform0}""'"' to define parameter transform0 of Reformat_1'
   fi
   select=""
   reject_threshold='Abort on first reject'
   limit_keyword=0
   ramp_keyword2=0.0
   keyword_map='limit_keyword limit ramp_keyword ramp ramp_keyword2 ramp'
   output_index=""
   _AB_FILE_NAME__output_index=Reformat-11.xfr
   logging=False
   condition=$((!CNDTL_PARTITION && CNDTL_REFORMAT))
   mpjret=$?
   if [ 0 -ne $mpjret ] ; then
      print -- Error evaluating: 'parameter condition of Reformat_1', interpretation 'shell'
      exit $mpjret
   fi
   print -rn Reformat_1__condition= >>${_AB_PROXY_DIR}/GDE-Parameters
   __AB_QUOTEIT "${condition}" >> ${_AB_PROXY_DIR}/GDE-Parameters
)
mpjret=$?
if [ 0 -ne $mpjret ] ; then exit $mpjret ; fi
(
   # Parameters of Partition by Key-1
   key="$CNDTL_PARTITION_KEY"
   condition=$((CNDTL_PARTITION && !CNDTL_REFORMAT))
   mpjret=$?
   if [ 0 -ne $mpjret ] ; then
      print -- Error evaluating: 'parameter condition of Partition_by_Key_1', interpretation 'shell'
      exit $mpjret
   fi
   print -rn Partition_by_Key_1__condition= >>${_AB_PROXY_DIR}/GDE-Parameters
   __AB_QUOTEIT "${condition}" >> ${_AB_PROXY_DIR}/GDE-Parameters
)
mpjret=$?
if [ 0 -ne $mpjret ] ; then exit $mpjret ; fi
(
   # Parameters of Partition by Key
   key="$CNDTL_PARTITION_KEY"
   condition=$((CNDTL_PARTITION && CNDTL_REFORMAT))
   mpjret=$?
   if [ 0 -ne $mpjret ] ; then
      print -- Error evaluating: 'parameter condition of Partition_by_Key', interpretation 'shell'
      exit $mpjret
   fi
   print -rn Partition_by_Key__condition= >>${_AB_PROXY_DIR}/GDE-Parameters
   __AB_QUOTEIT "${condition}" >> ${_AB_PROXY_DIR}/GDE-Parameters
)
mpjret=$?
if [ 0 -ne $mpjret ] ; then exit $mpjret ; fi
(
   # Parameters of Table_loader
   condition=$((CNDTL_PARTITION && CNDTL_REFORMAT))
   mpjret=$?
   if [ 0 -ne $mpjret ] ; then
      print -- Error evaluating: 'parameter condition of Table_loader', interpretation 'shell'
      exit $mpjret
   fi
   print -rn Table_loader__condition= >>${_AB_PROXY_DIR}/GDE-Parameters
   __AB_QUOTEIT "${condition}" >> ${_AB_PROXY_DIR}/GDE-Parameters
)
mpjret=$?
if [ 0 -ne $mpjret ] ; then exit $mpjret ; fi
(
   # Parameters of Table_loader-1
   condition=$((CNDTL_PARTITION && !CNDTL_REFORMAT))
   mpjret=$?
   if [ 0 -ne $mpjret ] ; then
      print -- Error evaluating: 'parameter condition of Table_loader_1', interpretation 'shell'
      exit $mpjret
   fi
   print -rn Table_loader_1__condition= >>${_AB_PROXY_DIR}/GDE-Parameters
   __AB_QUOTEIT "${condition}" >> ${_AB_PROXY_DIR}/GDE-Parameters
)
mpjret=$?
if [ 0 -ne $mpjret ] ; then exit $mpjret ; fi
(
   # Parameters of Table_loader-2
   condition=$((!CNDTL_PARTITION && CNDTL_REFORMAT))
   mpjret=$?
   if [ 0 -ne $mpjret ] ; then
      print -- Error evaluating: 'parameter condition of Table_loader_2', interpretation 'shell'
      exit $mpjret
   fi
   print -rn Table_loader_2__condition= >>${_AB_PROXY_DIR}/GDE-Parameters
   __AB_QUOTEIT "${condition}" >> ${_AB_PROXY_DIR}/GDE-Parameters
)
mpjret=$?
if [ 0 -ne $mpjret ] ; then exit $mpjret ; fi
(
   # Parameters of Table_loader-3
   condition=$((!CNDTL_PARTITION && !CNDTL_REFORMAT))
   mpjret=$?
   if [ 0 -ne $mpjret ] ; then
      print -- Error evaluating: 'parameter condition of Table_loader_3', interpretation 'shell'
      exit $mpjret
   fi
   print -rn Table_loader_3__condition= >>${_AB_PROXY_DIR}/GDE-Parameters
   __AB_QUOTEIT "${condition}" >> ${_AB_PROXY_DIR}/GDE-Parameters
)
mpjret=$?
if [ 0 -ne $mpjret ] ; then exit $mpjret ; fi
. ./${_AB_PROXY_DIR}/GDE-Parameters

#+Script Start+  ==================== Edits in this section are preserved.
if [ -z $IS_CATY ]
then
   print "$0: Error: IS_CATY variable not set"
   exit 4
fi

if [ -z $CNDTL_REFORMAT ]
then
   print "$0: Error: CNDTL_REFORMAT variable not set"
   exit 4
fi


if [ -z $FLOAD_LOAD_SESSIONS ]
then
   print "$0: Error: FLOAD_LOAD_SESSIONS variable not set"
   exit 4
fi


if [ -z $TPUMP_LOAD_SESSIONS ]
then
   print "$0: Error: TPUMP_LOAD_SESSIONS variable not set"
   exit 4
fi


if [ -z $LOAD_ERRLIMIT ]
then
   print "$0: Error: LOAD_ERRLIMIT variable not set"
   exit 4
fi


if [ -z $BATCH_SEQ_NUM ]
then
   print "$0: Error: BATCH_SEQ_NUM variable not set"
   exit 4
fi







































































#+End Script Start+  ====================
if [ -f "$AB_HOME/bin/ab_catalog_functions.ksh" ]; then . ab_catalog_functions.ksh; fi
mv "${_AB_PROXY_DIR}" "${AB_JOB}"'-single_table_oracle_load-ProxyDir'
_AB_PROXY_DIR="${AB_JOB}"'-single_table_oracle_load-ProxyDir'
print -r -- 'record string("|") node, timestamp, component, subcomponent, event_type; string("|\n") event_text; end' > "${_AB_PROXY_DIR}"'/Output_Table_Oracle-7.dml'

mp job ${AB_JOB}

# Layouts:
mp layout layout1 $WRK_DIR
mp layout layout2 file:.

# Record Formats (Metadata):
mp metadata metadata1 -file "$INPUT_DML"
mp metadata metadata2 -file "$OUTPUT_DML"
mp metadata metadata3 -file "${_AB_PROXY_DIR}"'/Output_Table_Oracle-7.dml'

export AB_CATALOG;AB_CATALOG=${AB_CATALOG:-"${XX_CATALOG}"}
# Catalog Usage: Creating temporary catalog using lookup files only
m_rmcatalog -catalog GDE-single_table_oracle_load-${AB_JOB}.cat > /dev/null 2>&1
m_mkcatalog -catalog GDE-single_table_oracle_load-${AB_JOB}.cat
SAVED_CATALOG="${AB_CATALOG}"
export AB_CATALOG;AB_CATALOG='GDE-single_table_oracle_load-'"${AB_JOB}"'.cat'
# 
# Initialize condition variables to user-specified conditions
# 
AB_USERCOND_single_table_oracle_load=1
AB_IS_LIVE_single_table_oracle_load=1
AB_USERCOND_Input_File=1
AB_IS_LIVE_Input_File=1
AB_HAS_DATA_Flow_1=1
AB_HAS_DATA_Flow_4=1
AB_HAS_DATA_Flow_5=1
AB_HAS_DATA_Flow_10=1
AB_USERCOND_Partition_by_Key="$Partition_by_Key__condition"
AB_USERCOND_Partition_by_Key=$(__AB_COND "${AB_USERCOND_Partition_by_Key}")
AB_IS_LIVE_Partition_by_Key=1
AB_HAS_DATA_Flow_7=1
AB_USERCOND_Reformat="$Reformat__condition"
AB_USERCOND_Reformat=$(__AB_COND "${AB_USERCOND_Reformat}")
AB_IS_LIVE_Reformat=1
AB_HAS_DATA_Flow_2=1
AB_USERCOND_Table_loader="$Table_loader__condition"
AB_USERCOND_Table_loader=$(__AB_COND "${AB_USERCOND_Table_loader}")
AB_IS_LIVE_Table_loader=1
AB_USERCOND_Table_loader_Replicate=0
AB_IS_LIVE_Table_loader_Replicate=1
AB_HAS_DATA_Table_loader_Flow_1=1
AB_USERCOND_Table_loader_Output_Table_Oracle__table_=1
AB_IS_LIVE_Table_loader_Output_Table_Oracle__table_=1
AB_HAS_DATA_Table_loader_Flow_11=1
AB_HAS_DATA_Table_loader_Flow_12=1
AB_USERCOND_Table_loader_Gather_Logs=1
AB_IS_LIVE_Table_loader_Gather_Logs=1
AB_USERCOND_Table_loader_Reject_File=1
AB_IS_LIVE_Table_loader_Reject_File=1
AB_USERCOND_Partition_by_Key_1="$Partition_by_Key_1__condition"
AB_USERCOND_Partition_by_Key_1=$(__AB_COND "${AB_USERCOND_Partition_by_Key_1}")
AB_IS_LIVE_Partition_by_Key_1=1
AB_HAS_DATA_Flow_3=1
AB_USERCOND_Table_loader_1="$Table_loader_1__condition"
AB_USERCOND_Table_loader_1=$(__AB_COND "${AB_USERCOND_Table_loader_1}")
AB_IS_LIVE_Table_loader_1=1
AB_USERCOND_Table_loader_1_Replicate=0
AB_IS_LIVE_Table_loader_1_Replicate=1
AB_HAS_DATA_Table_loader_1_Flow_1=1
AB_USERCOND_Table_loader_1_Output_Table_Oracle__table_=1
AB_IS_LIVE_Table_loader_1_Output_Table_Oracle__table_=1
AB_HAS_DATA_Table_loader_1_Flow_11=1
AB_HAS_DATA_Table_loader_1_Flow_12=1
AB_USERCOND_Table_loader_1_Gather_Logs=1
AB_IS_LIVE_Table_loader_1_Gather_Logs=1
AB_USERCOND_Table_loader_1_Reject_File=1
AB_IS_LIVE_Table_loader_1_Reject_File=1
AB_USERCOND_Reformat_1="$Reformat_1__condition"
AB_USERCOND_Reformat_1=$(__AB_COND "${AB_USERCOND_Reformat_1}")
AB_IS_LIVE_Reformat_1=1
AB_HAS_DATA_Flow_8=1
AB_USERCOND_Table_loader_2="$Table_loader_2__condition"
AB_USERCOND_Table_loader_2=$(__AB_COND "${AB_USERCOND_Table_loader_2}")
AB_IS_LIVE_Table_loader_2=1
AB_USERCOND_Table_loader_2_Replicate=0
AB_IS_LIVE_Table_loader_2_Replicate=1
AB_HAS_DATA_Table_loader_2_Flow_1=1
AB_USERCOND_Table_loader_2_Output_Table_Oracle__table_=1
AB_IS_LIVE_Table_loader_2_Output_Table_Oracle__table_=1
AB_HAS_DATA_Table_loader_2_Flow_11=1
AB_HAS_DATA_Table_loader_2_Flow_12=1
AB_USERCOND_Table_loader_2_Gather_Logs=1
AB_IS_LIVE_Table_loader_2_Gather_Logs=1
AB_USERCOND_Table_loader_2_Reject_File=1
AB_IS_LIVE_Table_loader_2_Reject_File=1
AB_USERCOND_Table_loader_3="$Table_loader_3__condition"
AB_USERCOND_Table_loader_3=$(__AB_COND "${AB_USERCOND_Table_loader_3}")
AB_IS_LIVE_Table_loader_3=1
AB_USERCOND_Table_loader_3_Replicate=0
AB_IS_LIVE_Table_loader_3_Replicate=1
AB_HAS_DATA_Table_loader_3_Flow_1=1
AB_USERCOND_Table_loader_3_Output_Table_Oracle__table_=1
AB_IS_LIVE_Table_loader_3_Output_Table_Oracle__table_=1
AB_HAS_DATA_Table_loader_3_Flow_11=1
AB_HAS_DATA_Table_loader_3_Flow_12=1
AB_USERCOND_Table_loader_3_Gather_Logs=1
AB_IS_LIVE_Table_loader_3_Gather_Logs=1
AB_USERCOND_Table_loader_3_Reject_File=1
AB_IS_LIVE_Table_loader_3_Reject_File=1
# 
# Compute condition variables by considering the conditions of neighboring components
# 
done=false
while [ $done = false ] ; do
   done=true
   Temp="${AB_HAS_DATA_Flow_1}"
   let AB_HAS_DATA_Flow_1="AB_IS_LIVE_Partition_by_Key"
   if [ X"${AB_HAS_DATA_Flow_1}" != X"$Temp" ]; then
      done=false
   fi
   Temp="${AB_HAS_DATA_Flow_4}"
   let AB_HAS_DATA_Flow_4="AB_IS_LIVE_Partition_by_Key_1"
   if [ X"${AB_HAS_DATA_Flow_4}" != X"$Temp" ]; then
      done=false
   fi
   Temp="${AB_HAS_DATA_Flow_5}"
   let AB_HAS_DATA_Flow_5="AB_IS_LIVE_Reformat_1"
   if [ X"${AB_HAS_DATA_Flow_5}" != X"$Temp" ]; then
      done=false
   fi
   Temp="${AB_HAS_DATA_Flow_10}"
   let AB_HAS_DATA_Flow_10="(AB_IS_LIVE_Table_loader_3) && ((AB_IS_LIVE_Table_loader_3_Replicate) || (AB_HAS_DATA_Table_loader_3_Flow_1))"
   if [ X"${AB_HAS_DATA_Flow_10}" != X"$Temp" ]; then
      done=false
   fi
   Temp="${AB_IS_LIVE_Partition_by_Key}"
   let AB_IS_LIVE_Partition_by_Key="((AB_HAS_DATA_Flow_1) && (AB_HAS_DATA_Flow_7)) && (AB_USERCOND_Partition_by_Key)"
   if [ X"${AB_IS_LIVE_Partition_by_Key}" != X"$Temp" ]; then
      done=false
   fi
   Temp="${AB_HAS_DATA_Flow_7}"
   let AB_HAS_DATA_Flow_7="(AB_IS_LIVE_Partition_by_Key) && (AB_IS_LIVE_Reformat)"
   if [ X"${AB_HAS_DATA_Flow_7}" != X"$Temp" ]; then
      done=false
   fi
   Temp="${AB_IS_LIVE_Reformat}"
   let AB_IS_LIVE_Reformat="((AB_HAS_DATA_Flow_7) && (((AB_HAS_DATA_Flow_2) != 0))) && (AB_USERCOND_Reformat)"
   if [ X"${AB_IS_LIVE_Reformat}" != X"$Temp" ]; then
      done=false
   fi
   Temp="${AB_HAS_DATA_Flow_2}"
   let AB_HAS_DATA_Flow_2="(AB_IS_LIVE_Reformat) && ((AB_IS_LIVE_Table_loader) && ((AB_IS_LIVE_Table_loader_Replicate) || (AB_HAS_DATA_Table_loader_Flow_1)))"
   if [ X"${AB_HAS_DATA_Flow_2}" != X"$Temp" ]; then
      done=false
   fi
   Temp="${AB_IS_LIVE_Table_loader}"
   let AB_IS_LIVE_Table_loader="AB_USERCOND_Table_loader"
   if [ X"${AB_IS_LIVE_Table_loader}" != X"$Temp" ]; then
      done=false
   fi
   Temp="${AB_IS_LIVE_Table_loader_Replicate}"
   let AB_IS_LIVE_Table_loader_Replicate="(AB_IS_LIVE_Table_loader) && ((AB_HAS_DATA_Flow_2) && ((((AB_HAS_DATA_Flow_2) > 1)) || (((AB_HAS_DATA_Table_loader_Flow_1) > 1))))"
   if [ X"${AB_IS_LIVE_Table_loader_Replicate}" != X"$Temp" ]; then
      done=false
   fi
   Temp="${AB_HAS_DATA_Table_loader_Flow_1}"
   let AB_HAS_DATA_Table_loader_Flow_1="(AB_IS_LIVE_Table_loader) && (((AB_IS_LIVE_Table_loader_Replicate) || (AB_HAS_DATA_Flow_2)) && (AB_IS_LIVE_Table_loader_Output_Table_Oracle__table_))"
   if [ X"${AB_HAS_DATA_Table_loader_Flow_1}" != X"$Temp" ]; then
      done=false
   fi
   Temp="${AB_IS_LIVE_Table_loader_Output_Table_Oracle__table_}"
   let AB_IS_LIVE_Table_loader_Output_Table_Oracle__table_="(AB_IS_LIVE_Table_loader) && (AB_HAS_DATA_Table_loader_Flow_1)"
   if [ X"${AB_IS_LIVE_Table_loader_Output_Table_Oracle__table_}" != X"$Temp" ]; then
      done=false
   fi
   Temp="${AB_HAS_DATA_Table_loader_Flow_11}"
   let AB_HAS_DATA_Table_loader_Flow_11="(AB_IS_LIVE_Table_loader) && ((AB_IS_LIVE_Table_loader_Output_Table_Oracle__table_) && (AB_IS_LIVE_Table_loader_Reject_File))"
   if [ X"${AB_HAS_DATA_Table_loader_Flow_11}" != X"$Temp" ]; then
      done=false
   fi
   Temp="${AB_HAS_DATA_Table_loader_Flow_12}"
   let AB_HAS_DATA_Table_loader_Flow_12="(AB_IS_LIVE_Table_loader) && ((AB_IS_LIVE_Table_loader_Output_Table_Oracle__table_) && (AB_IS_LIVE_Table_loader_Gather_Logs))"
   if [ X"${AB_HAS_DATA_Table_loader_Flow_12}" != X"$Temp" ]; then
      done=false
   fi
   Temp="${AB_IS_LIVE_Table_loader_Gather_Logs}"
   let AB_IS_LIVE_Table_loader_Gather_Logs="(AB_IS_LIVE_Table_loader) && (AB_HAS_DATA_Table_loader_Flow_12)"
   if [ X"${AB_IS_LIVE_Table_loader_Gather_Logs}" != X"$Temp" ]; then
      done=false
   fi
   Temp="${AB_IS_LIVE_Table_loader_Reject_File}"
   let AB_IS_LIVE_Table_loader_Reject_File="(AB_IS_LIVE_Table_loader) && (AB_HAS_DATA_Table_loader_Flow_11)"
   if [ X"${AB_IS_LIVE_Table_loader_Reject_File}" != X"$Temp" ]; then
      done=false
   fi
   Temp="${AB_IS_LIVE_Partition_by_Key_1}"
   let AB_IS_LIVE_Partition_by_Key_1="((AB_HAS_DATA_Flow_4) && (AB_HAS_DATA_Flow_3)) && (AB_USERCOND_Partition_by_Key_1)"
   if [ X"${AB_IS_LIVE_Partition_by_Key_1}" != X"$Temp" ]; then
      done=false
   fi
   Temp="${AB_HAS_DATA_Flow_3}"
   let AB_HAS_DATA_Flow_3="(AB_IS_LIVE_Partition_by_Key_1) && ((AB_IS_LIVE_Table_loader_1) && ((AB_IS_LIVE_Table_loader_1_Replicate) || (AB_HAS_DATA_Table_loader_1_Flow_1)))"
   if [ X"${AB_HAS_DATA_Flow_3}" != X"$Temp" ]; then
      done=false
   fi
   Temp="${AB_IS_LIVE_Table_loader_1}"
   let AB_IS_LIVE_Table_loader_1="AB_USERCOND_Table_loader_1"
   if [ X"${AB_IS_LIVE_Table_loader_1}" != X"$Temp" ]; then
      done=false
   fi
   Temp="${AB_IS_LIVE_Table_loader_1_Replicate}"
   let AB_IS_LIVE_Table_loader_1_Replicate="(AB_IS_LIVE_Table_loader_1) && ((AB_HAS_DATA_Flow_3) && ((((AB_HAS_DATA_Flow_3) > 1)) || (((AB_HAS_DATA_Table_loader_1_Flow_1) > 1))))"
   if [ X"${AB_IS_LIVE_Table_loader_1_Replicate}" != X"$Temp" ]; then
      done=false
   fi
   Temp="${AB_HAS_DATA_Table_loader_1_Flow_1}"
   let AB_HAS_DATA_Table_loader_1_Flow_1="(AB_IS_LIVE_Table_loader_1) && (((AB_IS_LIVE_Table_loader_1_Replicate) || (AB_HAS_DATA_Flow_3)) && (AB_IS_LIVE_Table_loader_1_Output_Table_Oracle__table_))"
   if [ X"${AB_HAS_DATA_Table_loader_1_Flow_1}" != X"$Temp" ]; then
      done=false
   fi
   Temp="${AB_IS_LIVE_Table_loader_1_Output_Table_Oracle__table_}"
   let AB_IS_LIVE_Table_loader_1_Output_Table_Oracle__table_="(AB_IS_LIVE_Table_loader_1) && (AB_HAS_DATA_Table_loader_1_Flow_1)"
   if [ X"${AB_IS_LIVE_Table_loader_1_Output_Table_Oracle__table_}" != X"$Temp" ]; then
      done=false
   fi
   Temp="${AB_HAS_DATA_Table_loader_1_Flow_11}"
   let AB_HAS_DATA_Table_loader_1_Flow_11="(AB_IS_LIVE_Table_loader_1) && ((AB_IS_LIVE_Table_loader_1_Output_Table_Oracle__table_) && (AB_IS_LIVE_Table_loader_1_Reject_File))"
   if [ X"${AB_HAS_DATA_Table_loader_1_Flow_11}" != X"$Temp" ]; then
      done=false
   fi
   Temp="${AB_HAS_DATA_Table_loader_1_Flow_12}"
   let AB_HAS_DATA_Table_loader_1_Flow_12="(AB_IS_LIVE_Table_loader_1) && ((AB_IS_LIVE_Table_loader_1_Output_Table_Oracle__table_) && (AB_IS_LIVE_Table_loader_1_Gather_Logs))"
   if [ X"${AB_HAS_DATA_Table_loader_1_Flow_12}" != X"$Temp" ]; then
      done=false
   fi
   Temp="${AB_IS_LIVE_Table_loader_1_Gather_Logs}"
   let AB_IS_LIVE_Table_loader_1_Gather_Logs="(AB_IS_LIVE_Table_loader_1) && (AB_HAS_DATA_Table_loader_1_Flow_12)"
   if [ X"${AB_IS_LIVE_Table_loader_1_Gather_Logs}" != X"$Temp" ]; then
      done=false
   fi
   Temp="${AB_IS_LIVE_Table_loader_1_Reject_File}"
   let AB_IS_LIVE_Table_loader_1_Reject_File="(AB_IS_LIVE_Table_loader_1) && (AB_HAS_DATA_Table_loader_1_Flow_11)"
   if [ X"${AB_IS_LIVE_Table_loader_1_Reject_File}" != X"$Temp" ]; then
      done=false
   fi
   Temp="${AB_IS_LIVE_Reformat_1}"
   let AB_IS_LIVE_Reformat_1="((AB_HAS_DATA_Flow_5) && (((AB_HAS_DATA_Flow_8) != 0))) && (AB_USERCOND_Reformat_1)"
   if [ X"${AB_IS_LIVE_Reformat_1}" != X"$Temp" ]; then
      done=false
   fi
   Temp="${AB_HAS_DATA_Flow_8}"
   let AB_HAS_DATA_Flow_8="(AB_IS_LIVE_Reformat_1) && ((AB_IS_LIVE_Table_loader_2) && ((AB_IS_LIVE_Table_loader_2_Replicate) || (AB_HAS_DATA_Table_loader_2_Flow_1)))"
   if [ X"${AB_HAS_DATA_Flow_8}" != X"$Temp" ]; then
      done=false
   fi
   Temp="${AB_IS_LIVE_Table_loader_2}"
   let AB_IS_LIVE_Table_loader_2="AB_USERCOND_Table_loader_2"
   if [ X"${AB_IS_LIVE_Table_loader_2}" != X"$Temp" ]; then
      done=false
   fi
   Temp="${AB_IS_LIVE_Table_loader_2_Replicate}"
   let AB_IS_LIVE_Table_loader_2_Replicate="(AB_IS_LIVE_Table_loader_2) && ((AB_HAS_DATA_Flow_8) && ((((AB_HAS_DATA_Flow_8) > 1)) || (((AB_HAS_DATA_Table_loader_2_Flow_1) > 1))))"
   if [ X"${AB_IS_LIVE_Table_loader_2_Replicate}" != X"$Temp" ]; then
      done=false
   fi
   Temp="${AB_HAS_DATA_Table_loader_2_Flow_1}"
   let AB_HAS_DATA_Table_loader_2_Flow_1="(AB_IS_LIVE_Table_loader_2) && (((AB_IS_LIVE_Table_loader_2_Replicate) || (AB_HAS_DATA_Flow_8)) && (AB_IS_LIVE_Table_loader_2_Output_Table_Oracle__table_))"
   if [ X"${AB_HAS_DATA_Table_loader_2_Flow_1}" != X"$Temp" ]; then
      done=false
   fi
   Temp="${AB_IS_LIVE_Table_loader_2_Output_Table_Oracle__table_}"
   let AB_IS_LIVE_Table_loader_2_Output_Table_Oracle__table_="(AB_IS_LIVE_Table_loader_2) && (AB_HAS_DATA_Table_loader_2_Flow_1)"
   if [ X"${AB_IS_LIVE_Table_loader_2_Output_Table_Oracle__table_}" != X"$Temp" ]; then
      done=false
   fi
   Temp="${AB_HAS_DATA_Table_loader_2_Flow_11}"
   let AB_HAS_DATA_Table_loader_2_Flow_11="(AB_IS_LIVE_Table_loader_2) && ((AB_IS_LIVE_Table_loader_2_Output_Table_Oracle__table_) && (AB_IS_LIVE_Table_loader_2_Reject_File))"
   if [ X"${AB_HAS_DATA_Table_loader_2_Flow_11}" != X"$Temp" ]; then
      done=false
   fi
   Temp="${AB_HAS_DATA_Table_loader_2_Flow_12}"
   let AB_HAS_DATA_Table_loader_2_Flow_12="(AB_IS_LIVE_Table_loader_2) && ((AB_IS_LIVE_Table_loader_2_Output_Table_Oracle__table_) && (AB_IS_LIVE_Table_loader_2_Gather_Logs))"
   if [ X"${AB_HAS_DATA_Table_loader_2_Flow_12}" != X"$Temp" ]; then
      done=false
   fi
   Temp="${AB_IS_LIVE_Table_loader_2_Gather_Logs}"
   let AB_IS_LIVE_Table_loader_2_Gather_Logs="(AB_IS_LIVE_Table_loader_2) && (AB_HAS_DATA_Table_loader_2_Flow_12)"
   if [ X"${AB_IS_LIVE_Table_loader_2_Gather_Logs}" != X"$Temp" ]; then
      done=false
   fi
   Temp="${AB_IS_LIVE_Table_loader_2_Reject_File}"
   let AB_IS_LIVE_Table_loader_2_Reject_File="(AB_IS_LIVE_Table_loader_2) && (AB_HAS_DATA_Table_loader_2_Flow_11)"
   if [ X"${AB_IS_LIVE_Table_loader_2_Reject_File}" != X"$Temp" ]; then
      done=false
   fi
   Temp="${AB_IS_LIVE_Table_loader_3}"
   let AB_IS_LIVE_Table_loader_3="AB_USERCOND_Table_loader_3"
   if [ X"${AB_IS_LIVE_Table_loader_3}" != X"$Temp" ]; then
      done=false
   fi
   Temp="${AB_IS_LIVE_Table_loader_3_Replicate}"
   let AB_IS_LIVE_Table_loader_3_Replicate="(AB_IS_LIVE_Table_loader_3) && ((AB_HAS_DATA_Flow_10) && ((((AB_HAS_DATA_Flow_10) > 1)) || (((AB_HAS_DATA_Table_loader_3_Flow_1) > 1))))"
   if [ X"${AB_IS_LIVE_Table_loader_3_Replicate}" != X"$Temp" ]; then
      done=false
   fi
   Temp="${AB_HAS_DATA_Table_loader_3_Flow_1}"
   let AB_HAS_DATA_Table_loader_3_Flow_1="(AB_IS_LIVE_Table_loader_3) && (((AB_IS_LIVE_Table_loader_3_Replicate) || (AB_HAS_DATA_Flow_10)) && (AB_IS_LIVE_Table_loader_3_Output_Table_Oracle__table_))"
   if [ X"${AB_HAS_DATA_Table_loader_3_Flow_1}" != X"$Temp" ]; then
      done=false
   fi
   Temp="${AB_IS_LIVE_Table_loader_3_Output_Table_Oracle__table_}"
   let AB_IS_LIVE_Table_loader_3_Output_Table_Oracle__table_="(AB_IS_LIVE_Table_loader_3) && (AB_HAS_DATA_Table_loader_3_Flow_1)"
   if [ X"${AB_IS_LIVE_Table_loader_3_Output_Table_Oracle__table_}" != X"$Temp" ]; then
      done=false
   fi
   Temp="${AB_HAS_DATA_Table_loader_3_Flow_11}"
   let AB_HAS_DATA_Table_loader_3_Flow_11="(AB_IS_LIVE_Table_loader_3) && ((AB_IS_LIVE_Table_loader_3_Output_Table_Oracle__table_) && (AB_IS_LIVE_Table_loader_3_Reject_File))"
   if [ X"${AB_HAS_DATA_Table_loader_3_Flow_11}" != X"$Temp" ]; then
      done=false
   fi
   Temp="${AB_HAS_DATA_Table_loader_3_Flow_12}"
   let AB_HAS_DATA_Table_loader_3_Flow_12="(AB_IS_LIVE_Table_loader_3) && ((AB_IS_LIVE_Table_loader_3_Output_Table_Oracle__table_) && (AB_IS_LIVE_Table_loader_3_Gather_Logs))"
   if [ X"${AB_HAS_DATA_Table_loader_3_Flow_12}" != X"$Temp" ]; then
      done=false
   fi
   Temp="${AB_IS_LIVE_Table_loader_3_Gather_Logs}"
   let AB_IS_LIVE_Table_loader_3_Gather_Logs="(AB_IS_LIVE_Table_loader_3) && (AB_HAS_DATA_Table_loader_3_Flow_12)"
   if [ X"${AB_IS_LIVE_Table_loader_3_Gather_Logs}" != X"$Temp" ]; then
      done=false
   fi
   Temp="${AB_IS_LIVE_Table_loader_3_Reject_File}"
   let AB_IS_LIVE_Table_loader_3_Reject_File="(AB_IS_LIVE_Table_loader_3) && (AB_HAS_DATA_Table_loader_3_Flow_11)"
   if [ X"${AB_IS_LIVE_Table_loader_3_Reject_File}" != X"$Temp" ]; then
      done=false
   fi
done
# 
if [ X"${AB_VERBOSE_CONDITIONS}" != X"" ]; then
   # 
   # echo condition variables
   # 
   print -r -- 'AB_USERCOND_single_table_oracle_load=1'
   print -r -- 'AB_IS_LIVE_single_table_oracle_load=1'
   print -r -- 'AB_USERCOND_Input_File=1'
   print -r -- 'AB_IS_LIVE_Input_File=1'
   print -r -- 'AB_HAS_DATA_Flow_1='"${AB_HAS_DATA_Flow_1}"
   print -r -- 'AB_HAS_DATA_Flow_4='"${AB_HAS_DATA_Flow_4}"
   print -r -- 'AB_HAS_DATA_Flow_5='"${AB_HAS_DATA_Flow_5}"
   print -r -- 'AB_HAS_DATA_Flow_10='"${AB_HAS_DATA_Flow_10}"
   print -r -- 'AB_USERCOND_Partition_by_Key='"${AB_USERCOND_Partition_by_Key}"
   print -r -- 'AB_IS_LIVE_Partition_by_Key='"${AB_IS_LIVE_Partition_by_Key}"
   print -r -- 'AB_HAS_DATA_Flow_7='"${AB_HAS_DATA_Flow_7}"
   print -r -- 'AB_USERCOND_Reformat='"${AB_USERCOND_Reformat}"
   print -r -- 'AB_IS_LIVE_Reformat='"${AB_IS_LIVE_Reformat}"
   print -r -- 'AB_HAS_DATA_Flow_2='"${AB_HAS_DATA_Flow_2}"
   print -r -- 'AB_USERCOND_Table_loader='"${AB_USERCOND_Table_loader}"
   print -r -- 'AB_IS_LIVE_Table_loader='"${AB_IS_LIVE_Table_loader}"
   print -r -- 'AB_USERCOND_Table_loader_Replicate=0'
   print -r -- 'AB_IS_LIVE_Table_loader_Replicate='"${AB_IS_LIVE_Table_loader_Replicate}"
   print -r -- 'AB_HAS_DATA_Table_loader_Flow_1='"${AB_HAS_DATA_Table_loader_Flow_1}"
   print -r -- 'AB_USERCOND_Table_loader_Output_Table_Oracle__table_=1'
   print -r -- 'AB_IS_LIVE_Table_loader_Output_Table_Oracle__table_='"${AB_IS_LIVE_Table_loader_Output_Table_Oracle__table_}"
   print -r -- 'AB_HAS_DATA_Table_loader_Flow_11='"${AB_HAS_DATA_Table_loader_Flow_11}"
   print -r -- 'AB_HAS_DATA_Table_loader_Flow_12='"${AB_HAS_DATA_Table_loader_Flow_12}"
   print -r -- 'AB_USERCOND_Table_loader_Gather_Logs=1'
   print -r -- 'AB_IS_LIVE_Table_loader_Gather_Logs='"${AB_IS_LIVE_Table_loader_Gather_Logs}"
   print -r -- 'AB_USERCOND_Table_loader_Reject_File=1'
   print -r -- 'AB_IS_LIVE_Table_loader_Reject_File='"${AB_IS_LIVE_Table_loader_Reject_File}"
   print -r -- 'AB_USERCOND_Partition_by_Key_1='"${AB_USERCOND_Partition_by_Key_1}"
   print -r -- 'AB_IS_LIVE_Partition_by_Key_1='"${AB_IS_LIVE_Partition_by_Key_1}"
   print -r -- 'AB_HAS_DATA_Flow_3='"${AB_HAS_DATA_Flow_3}"
   print -r -- 'AB_USERCOND_Table_loader_1='"${AB_USERCOND_Table_loader_1}"
   print -r -- 'AB_IS_LIVE_Table_loader_1='"${AB_IS_LIVE_Table_loader_1}"
   print -r -- 'AB_USERCOND_Table_loader_1_Replicate=0'
   print -r -- 'AB_IS_LIVE_Table_loader_1_Replicate='"${AB_IS_LIVE_Table_loader_1_Replicate}"
   print -r -- 'AB_HAS_DATA_Table_loader_1_Flow_1='"${AB_HAS_DATA_Table_loader_1_Flow_1}"
   print -r -- 'AB_USERCOND_Table_loader_1_Output_Table_Oracle__table_=1'
   print -r -- 'AB_IS_LIVE_Table_loader_1_Output_Table_Oracle__table_='"${AB_IS_LIVE_Table_loader_1_Output_Table_Oracle__table_}"
   print -r -- 'AB_HAS_DATA_Table_loader_1_Flow_11='"${AB_HAS_DATA_Table_loader_1_Flow_11}"
   print -r -- 'AB_HAS_DATA_Table_loader_1_Flow_12='"${AB_HAS_DATA_Table_loader_1_Flow_12}"
   print -r -- 'AB_USERCOND_Table_loader_1_Gather_Logs=1'
   print -r -- 'AB_IS_LIVE_Table_loader_1_Gather_Logs='"${AB_IS_LIVE_Table_loader_1_Gather_Logs}"
   print -r -- 'AB_USERCOND_Table_loader_1_Reject_File=1'
   print -r -- 'AB_IS_LIVE_Table_loader_1_Reject_File='"${AB_IS_LIVE_Table_loader_1_Reject_File}"
   print -r -- 'AB_USERCOND_Reformat_1='"${AB_USERCOND_Reformat_1}"
   print -r -- 'AB_IS_LIVE_Reformat_1='"${AB_IS_LIVE_Reformat_1}"
   print -r -- 'AB_HAS_DATA_Flow_8='"${AB_HAS_DATA_Flow_8}"
   print -r -- 'AB_USERCOND_Table_loader_2='"${AB_USERCOND_Table_loader_2}"
   print -r -- 'AB_IS_LIVE_Table_loader_2='"${AB_IS_LIVE_Table_loader_2}"
   print -r -- 'AB_USERCOND_Table_loader_2_Replicate=0'
   print -r -- 'AB_IS_LIVE_Table_loader_2_Replicate='"${AB_IS_LIVE_Table_loader_2_Replicate}"
   print -r -- 'AB_HAS_DATA_Table_loader_2_Flow_1='"${AB_HAS_DATA_Table_loader_2_Flow_1}"
   print -r -- 'AB_USERCOND_Table_loader_2_Output_Table_Oracle__table_=1'
   print -r -- 'AB_IS_LIVE_Table_loader_2_Output_Table_Oracle__table_='"${AB_IS_LIVE_Table_loader_2_Output_Table_Oracle__table_}"
   print -r -- 'AB_HAS_DATA_Table_loader_2_Flow_11='"${AB_HAS_DATA_Table_loader_2_Flow_11}"
   print -r -- 'AB_HAS_DATA_Table_loader_2_Flow_12='"${AB_HAS_DATA_Table_loader_2_Flow_12}"
   print -r -- 'AB_USERCOND_Table_loader_2_Gather_Logs=1'
   print -r -- 'AB_IS_LIVE_Table_loader_2_Gather_Logs='"${AB_IS_LIVE_Table_loader_2_Gather_Logs}"
   print -r -- 'AB_USERCOND_Table_loader_2_Reject_File=1'
   print -r -- 'AB_IS_LIVE_Table_loader_2_Reject_File='"${AB_IS_LIVE_Table_loader_2_Reject_File}"
   print -r -- 'AB_USERCOND_Table_loader_3='"${AB_USERCOND_Table_loader_3}"
   print -r -- 'AB_IS_LIVE_Table_loader_3='"${AB_IS_LIVE_Table_loader_3}"
   print -r -- 'AB_USERCOND_Table_loader_3_Replicate=0'
   print -r -- 'AB_IS_LIVE_Table_loader_3_Replicate='"${AB_IS_LIVE_Table_loader_3_Replicate}"
   print -r -- 'AB_HAS_DATA_Table_loader_3_Flow_1='"${AB_HAS_DATA_Table_loader_3_Flow_1}"
   print -r -- 'AB_USERCOND_Table_loader_3_Output_Table_Oracle__table_=1'
   print -r -- 'AB_IS_LIVE_Table_loader_3_Output_Table_Oracle__table_='"${AB_IS_LIVE_Table_loader_3_Output_Table_Oracle__table_}"
   print -r -- 'AB_HAS_DATA_Table_loader_3_Flow_11='"${AB_HAS_DATA_Table_loader_3_Flow_11}"
   print -r -- 'AB_HAS_DATA_Table_loader_3_Flow_12='"${AB_HAS_DATA_Table_loader_3_Flow_12}"
   print -r -- 'AB_USERCOND_Table_loader_3_Gather_Logs=1'
   print -r -- 'AB_IS_LIVE_Table_loader_3_Gather_Logs='"${AB_IS_LIVE_Table_loader_3_Gather_Logs}"
   print -r -- 'AB_USERCOND_Table_loader_3_Reject_File=1'
   print -r -- 'AB_IS_LIVE_Table_loader_3_Reject_File='"${AB_IS_LIVE_Table_loader_3_Reject_File}"
fi

# Files:
mp ifile Input_File $INPUT_FILE
AB_PORT_Input_File_read=Input_File.read
AB_METADATA_Input_File_read=' -metadata metadata1'

# Components in phase 0:
if [ X"${AB_IS_LIVE_Partition_by_Key}" != X0 ]; then
   mp hash-partition Partition_by_Key "$CNDTL_PARTITION_KEY" -layout Input_File
   AB_PORT_Partition_by_Key_out=Partition_by_Key.out
   AB_METADATA_Partition_by_Key_out=' -metadata metadata1'
else
   :
fi
if [ X"${AB_IS_LIVE_Reformat}" != X0 ]; then
   mp reformat-transform Reformat -limit 0 -ramp 0.0 -layout layout1
   let AB_DO_ADD_PORT="AB_HAS_DATA_Flow_2"
   if [ X"${AB_DO_ADD_PORT}" != X0 ]; then
      mp add-port Reformat.out.out0 ${REFORMAT_TRANS_FILE:+"$REFORMAT_TRANS_FILE"}
   fi
   AB_PORT_Reformat_out_out0=Reformat.out.out0
   AB_METADATA_Reformat_out_out0=' -metadata metadata2'
else
   :
fi
if [ X"${AB_IS_LIVE_Table_loader_Replicate}" != X0 ]; then
   mp broadcast Table_loader.Replicate -layout layout1
   AB_PORT_Table_loader_Replicate_out=Table_loader.Replicate.out
   AB_METADATA_Table_loader_Replicate_out=' -metadata metadata2'
else
   AB_PORT_Table_loader_Replicate_out="${AB_PORT_Reformat_out_out0}"
   AB_METADATA_Table_loader_Replicate_out="${AB_METADATA_Reformat_out_out0}"
   :
fi
if [ X"${AB_IS_LIVE_Table_loader_Output_Table_Oracle__table_}" != X0 ]; then
   mp otable Table_loader.Output_Table_Oracle__table_ "$AB_IDB_CONFIG" -flags wronly,trunc -table "${STAGE_DB}"'.'"${STAGE_TABLE}" -direct -interface utility -field_type_preference variable -num_errors 50 -layout layout1
   AB_PORT_Table_loader_Output_Table_Oracle__table__reject=Table_loader.Output_Table_Oracle__table_.reject
   AB_METADATA_Table_loader_Output_Table_Oracle__table__reject=' -metadata metadata2'
   AB_PORT_Table_loader_Output_Table_Oracle__table__log=Table_loader.Output_Table_Oracle__table_.log
   AB_METADATA_Table_loader_Output_Table_Oracle__table__log=' -metadata metadata3'
else
   :
fi
if [ X"${AB_IS_LIVE_Table_loader_Gather_Logs}" != X0 ]; then
   mp logger Table_loader.Gather_Logs "$OUTPUT_TABLE_LOGFILE" Start End -layout layout2
else
   :
fi
if [ X"${AB_IS_LIVE_Table_loader_Reject_File}" != X0 ]; then
   mp logger Table_loader.Reject_File "$LOAD_REJFILE" Start End -layout layout2
else
   :
fi
if [ X"${AB_IS_LIVE_Partition_by_Key_1}" != X0 ]; then
   mp hash-partition Partition_by_Key_1 "$CNDTL_PARTITION_KEY" -layout Input_File
   AB_PORT_Partition_by_Key_1_out=Partition_by_Key_1.out
   AB_METADATA_Partition_by_Key_1_out=' -metadata metadata1'
else
   :
fi
if [ X"${AB_IS_LIVE_Table_loader_1_Replicate}" != X0 ]; then
   mp broadcast Table_loader_1.Replicate -layout Input_File
   AB_PORT_Table_loader_1_Replicate_out=Table_loader_1.Replicate.out
   AB_METADATA_Table_loader_1_Replicate_out=' -metadata metadata1'
else
   AB_PORT_Table_loader_1_Replicate_out="${AB_PORT_Partition_by_Key_1_out}"
   AB_METADATA_Table_loader_1_Replicate_out="${AB_METADATA_Partition_by_Key_1_out}"
   :
fi
if [ X"${AB_IS_LIVE_Table_loader_1_Output_Table_Oracle__table_}" != X0 ]; then
   mp otable Table_loader_1.Output_Table_Oracle__table_ "$AB_IDB_CONFIG" -flags wronly,trunc -table "${STAGE_DB}"'.'"${STAGE_TABLE}" -direct -interface utility -field_type_preference variable -num_errors 50 -layout Input_File
   AB_PORT_Table_loader_1_Output_Table_Oracle__table__reject=Table_loader_1.Output_Table_Oracle__table_.reject
   AB_METADATA_Table_loader_1_Output_Table_Oracle__table__reject=' -metadata metadata1'
   AB_PORT_Table_loader_1_Output_Table_Oracle__table__log=Table_loader_1.Output_Table_Oracle__table_.log
   AB_METADATA_Table_loader_1_Output_Table_Oracle__table__log=' -metadata metadata3'
else
   :
fi
if [ X"${AB_IS_LIVE_Table_loader_1_Gather_Logs}" != X0 ]; then
   mp logger Table_loader_1.Gather_Logs "$OUTPUT_TABLE_LOGFILE" Start End -layout layout2
else
   :
fi
if [ X"${AB_IS_LIVE_Table_loader_1_Reject_File}" != X0 ]; then
   mp logger Table_loader_1.Reject_File "$LOAD_REJFILE" Start End -layout layout2
else
   :
fi
if [ X"${AB_IS_LIVE_Reformat_1}" != X0 ]; then
   mp reformat-transform Reformat_1 -limit 0 -ramp 0.0 -layout Input_File
   let AB_DO_ADD_PORT="AB_HAS_DATA_Flow_8"
   if [ X"${AB_DO_ADD_PORT}" != X0 ]; then
      mp add-port Reformat_1.out.out0 ${REFORMAT_TRANS_FILE:+"$REFORMAT_TRANS_FILE"}
   fi
   AB_PORT_Reformat_1_out_out0=Reformat_1.out.out0
   AB_METADATA_Reformat_1_out_out0=' -metadata metadata2'
else
   :
fi
if [ X"${AB_IS_LIVE_Table_loader_2_Replicate}" != X0 ]; then
   mp broadcast Table_loader_2.Replicate -layout Input_File
   AB_PORT_Table_loader_2_Replicate_out=Table_loader_2.Replicate.out
   AB_METADATA_Table_loader_2_Replicate_out=' -metadata metadata2'
else
   AB_PORT_Table_loader_2_Replicate_out="${AB_PORT_Reformat_1_out_out0}"
   AB_METADATA_Table_loader_2_Replicate_out="${AB_METADATA_Reformat_1_out_out0}"
   :
fi
if [ X"${AB_IS_LIVE_Table_loader_2_Output_Table_Oracle__table_}" != X0 ]; then
   mp otable Table_loader_2.Output_Table_Oracle__table_ "$AB_IDB_CONFIG" -flags wronly,trunc -table "${STAGE_DB}"'.'"${STAGE_TABLE}" -direct -interface utility -field_type_preference variable -num_errors 50 -layout Input_File
   AB_PORT_Table_loader_2_Output_Table_Oracle__table__reject=Table_loader_2.Output_Table_Oracle__table_.reject
   AB_METADATA_Table_loader_2_Output_Table_Oracle__table__reject=' -metadata metadata2'
   AB_PORT_Table_loader_2_Output_Table_Oracle__table__log=Table_loader_2.Output_Table_Oracle__table_.log
   AB_METADATA_Table_loader_2_Output_Table_Oracle__table__log=' -metadata metadata3'
else
   :
fi
if [ X"${AB_IS_LIVE_Table_loader_2_Gather_Logs}" != X0 ]; then
   mp logger Table_loader_2.Gather_Logs "$OUTPUT_TABLE_LOGFILE" Start End -layout layout2
else
   :
fi
if [ X"${AB_IS_LIVE_Table_loader_2_Reject_File}" != X0 ]; then
   mp logger Table_loader_2.Reject_File "$LOAD_REJFILE" Start End -layout layout2
else
   :
fi
if [ X"${AB_IS_LIVE_Table_loader_3_Replicate}" != X0 ]; then
   mp broadcast Table_loader_3.Replicate -layout Input_File
   AB_PORT_Table_loader_3_Replicate_out=Table_loader_3.Replicate.out
   AB_METADATA_Table_loader_3_Replicate_out=' -metadata metadata1'
else
   AB_PORT_Table_loader_3_Replicate_out="${AB_PORT_Input_File_read}"
   AB_METADATA_Table_loader_3_Replicate_out="${AB_METADATA_Input_File_read}"
   :
fi
if [ X"${AB_IS_LIVE_Table_loader_3_Output_Table_Oracle__table_}" != X0 ]; then
   mp otable Table_loader_3.Output_Table_Oracle__table_ "$AB_IDB_CONFIG" -flags wronly,trunc -table "${STAGE_DB}"'.'"${STAGE_TABLE}" -direct -interface utility -field_type_preference variable -num_errors 50 -layout Input_File
   AB_PORT_Table_loader_3_Output_Table_Oracle__table__reject=Table_loader_3.Output_Table_Oracle__table_.reject
   AB_METADATA_Table_loader_3_Output_Table_Oracle__table__reject=' -metadata metadata1'
   AB_PORT_Table_loader_3_Output_Table_Oracle__table__log=Table_loader_3.Output_Table_Oracle__table_.log
   AB_METADATA_Table_loader_3_Output_Table_Oracle__table__log=' -metadata metadata3'
else
   :
fi
if [ X"${AB_IS_LIVE_Table_loader_3_Gather_Logs}" != X0 ]; then
   mp logger Table_loader_3.Gather_Logs "$OUTPUT_TABLE_LOGFILE" Start End -layout layout2
else
   :
fi
if [ X"${AB_IS_LIVE_Table_loader_3_Reject_File}" != X0 ]; then
   mp logger Table_loader_3.Reject_File "$LOAD_REJFILE" Start End -layout layout2
else
   :
fi

# Flows for Entire Graph:
let AB_FLOW_CONDITION="(AB_IS_LIVE_Partition_by_Key) && (AB_HAS_DATA_Flow_1)"
if [ X"${AB_FLOW_CONDITION}" != X0 ]; then
   mp straight-flow Flow_1 "${AB_PORT_Input_File_read}" Partition_by_Key.in${AB_METADATA_Input_File_read}
fi
let AB_FLOW_CONDITION="(AB_IS_LIVE_Reformat) && (AB_HAS_DATA_Flow_7)"
if [ X"${AB_FLOW_CONDITION}" != X0 ]; then
   mp all-to-all-flow Flow_7 "${AB_PORT_Partition_by_Key_out}" Reformat.in${AB_METADATA_Partition_by_Key_out}
fi
let AB_FLOW_CONDITION="(AB_IS_LIVE_Table_loader_Replicate) && (AB_HAS_DATA_Flow_2)"
if [ X"${AB_FLOW_CONDITION}" != X0 ]; then
   mp straight-flow Flow_2 "${AB_PORT_Reformat_out_out0}" Table_loader.Replicate.in${AB_METADATA_Reformat_out_out0}
fi
let AB_FLOW_CONDITION="(AB_IS_LIVE_Table_loader_Output_Table_Oracle__table_) && (AB_HAS_DATA_Table_loader_Flow_1)"
if [ X"${AB_FLOW_CONDITION}" != X0 ]; then
   mp straight-flow Table_loader.Flow_1 "${AB_PORT_Table_loader_Replicate_out}" Table_loader.Output_Table_Oracle__table_.write${AB_METADATA_Table_loader_Replicate_out}
fi
let AB_FLOW_CONDITION="(AB_IS_LIVE_Table_loader_Gather_Logs) && (AB_HAS_DATA_Table_loader_Flow_12)"
if [ X"${AB_FLOW_CONDITION}" != X0 ]; then
   mp fan-in-flow Table_loader.Flow_12 "${AB_PORT_Table_loader_Output_Table_Oracle__table__log}" Table_loader.Gather_Logs.in${AB_METADATA_Table_loader_Output_Table_Oracle__table__log}
fi
let AB_FLOW_CONDITION="(AB_IS_LIVE_Table_loader_Reject_File) && (AB_HAS_DATA_Table_loader_Flow_11)"
if [ X"${AB_FLOW_CONDITION}" != X0 ]; then
   mp fan-in-flow Table_loader.Flow_11 "${AB_PORT_Table_loader_Output_Table_Oracle__table__reject}" Table_loader.Reject_File.in${AB_METADATA_Table_loader_Output_Table_Oracle__table__reject}
fi
let AB_FLOW_CONDITION="(AB_IS_LIVE_Partition_by_Key_1) && (AB_HAS_DATA_Flow_4)"
if [ X"${AB_FLOW_CONDITION}" != X0 ]; then
   mp straight-flow Flow_4 "${AB_PORT_Input_File_read}" Partition_by_Key_1.in${AB_METADATA_Input_File_read}
fi
let AB_FLOW_CONDITION="(AB_IS_LIVE_Table_loader_1_Replicate) && (AB_HAS_DATA_Flow_3)"
if [ X"${AB_FLOW_CONDITION}" != X0 ]; then
   mp all-to-all-flow Flow_3 "${AB_PORT_Partition_by_Key_1_out}" Table_loader_1.Replicate.in${AB_METADATA_Partition_by_Key_1_out}
fi
let AB_FLOW_CONDITION="(AB_IS_LIVE_Table_loader_1_Output_Table_Oracle__table_) && (AB_HAS_DATA_Table_loader_1_Flow_1)"
if [ X"${AB_FLOW_CONDITION}" != X0 ]; then
   mp straight-flow Table_loader_1.Flow_1 "${AB_PORT_Table_loader_1_Replicate_out}" Table_loader_1.Output_Table_Oracle__table_.write${AB_METADATA_Table_loader_1_Replicate_out}
fi
let AB_FLOW_CONDITION="(AB_IS_LIVE_Table_loader_1_Gather_Logs) && (AB_HAS_DATA_Table_loader_1_Flow_12)"
if [ X"${AB_FLOW_CONDITION}" != X0 ]; then
   mp fan-in-flow Table_loader_1.Flow_12 "${AB_PORT_Table_loader_1_Output_Table_Oracle__table__log}" Table_loader_1.Gather_Logs.in${AB_METADATA_Table_loader_1_Output_Table_Oracle__table__log}
fi
let AB_FLOW_CONDITION="(AB_IS_LIVE_Table_loader_1_Reject_File) && (AB_HAS_DATA_Table_loader_1_Flow_11)"
if [ X"${AB_FLOW_CONDITION}" != X0 ]; then
   mp fan-in-flow Table_loader_1.Flow_11 "${AB_PORT_Table_loader_1_Output_Table_Oracle__table__reject}" Table_loader_1.Reject_File.in${AB_METADATA_Table_loader_1_Output_Table_Oracle__table__reject}
fi
let AB_FLOW_CONDITION="(AB_IS_LIVE_Reformat_1) && (AB_HAS_DATA_Flow_5)"
if [ X"${AB_FLOW_CONDITION}" != X0 ]; then
   mp straight-flow Flow_5 "${AB_PORT_Input_File_read}" Reformat_1.in${AB_METADATA_Input_File_read}
fi
let AB_FLOW_CONDITION="(AB_IS_LIVE_Table_loader_2_Replicate) && (AB_HAS_DATA_Flow_8)"
if [ X"${AB_FLOW_CONDITION}" != X0 ]; then
   mp straight-flow Flow_8 "${AB_PORT_Reformat_1_out_out0}" Table_loader_2.Replicate.in${AB_METADATA_Reformat_1_out_out0}
fi
let AB_FLOW_CONDITION="(AB_IS_LIVE_Table_loader_2_Output_Table_Oracle__table_) && (AB_HAS_DATA_Table_loader_2_Flow_1)"
if [ X"${AB_FLOW_CONDITION}" != X0 ]; then
   mp straight-flow Table_loader_2.Flow_1 "${AB_PORT_Table_loader_2_Replicate_out}" Table_loader_2.Output_Table_Oracle__table_.write${AB_METADATA_Table_loader_2_Replicate_out}
fi
let AB_FLOW_CONDITION="(AB_IS_LIVE_Table_loader_2_Gather_Logs) && (AB_HAS_DATA_Table_loader_2_Flow_12)"
if [ X"${AB_FLOW_CONDITION}" != X0 ]; then
   mp fan-in-flow Table_loader_2.Flow_12 "${AB_PORT_Table_loader_2_Output_Table_Oracle__table__log}" Table_loader_2.Gather_Logs.in${AB_METADATA_Table_loader_2_Output_Table_Oracle__table__log}
fi
let AB_FLOW_CONDITION="(AB_IS_LIVE_Table_loader_2_Reject_File) && (AB_HAS_DATA_Table_loader_2_Flow_11)"
if [ X"${AB_FLOW_CONDITION}" != X0 ]; then
   mp fan-in-flow Table_loader_2.Flow_11 "${AB_PORT_Table_loader_2_Output_Table_Oracle__table__reject}" Table_loader_2.Reject_File.in${AB_METADATA_Table_loader_2_Output_Table_Oracle__table__reject}
fi
let AB_FLOW_CONDITION="(AB_IS_LIVE_Table_loader_3_Replicate) && (AB_HAS_DATA_Flow_10)"
if [ X"${AB_FLOW_CONDITION}" != X0 ]; then
   mp straight-flow Flow_10 "${AB_PORT_Input_File_read}" Table_loader_3.Replicate.in${AB_METADATA_Input_File_read}
fi
let AB_FLOW_CONDITION="(AB_IS_LIVE_Table_loader_3_Output_Table_Oracle__table_) && (AB_HAS_DATA_Table_loader_3_Flow_1)"
if [ X"${AB_FLOW_CONDITION}" != X0 ]; then
   mp straight-flow Table_loader_3.Flow_1 "${AB_PORT_Table_loader_3_Replicate_out}" Table_loader_3.Output_Table_Oracle__table_.write${AB_METADATA_Table_loader_3_Replicate_out}
fi
let AB_FLOW_CONDITION="(AB_IS_LIVE_Table_loader_3_Gather_Logs) && (AB_HAS_DATA_Table_loader_3_Flow_12)"
if [ X"${AB_FLOW_CONDITION}" != X0 ]; then
   mp fan-in-flow Table_loader_3.Flow_12 "${AB_PORT_Table_loader_3_Output_Table_Oracle__table__log}" Table_loader_3.Gather_Logs.in${AB_METADATA_Table_loader_3_Output_Table_Oracle__table__log}
fi
let AB_FLOW_CONDITION="(AB_IS_LIVE_Table_loader_3_Reject_File) && (AB_HAS_DATA_Table_loader_3_Flow_11)"
if [ X"${AB_FLOW_CONDITION}" != X0 ]; then
   mp fan-in-flow Table_loader_3.Flow_11 "${AB_PORT_Table_loader_3_Output_Table_Oracle__table__reject}" Table_loader_3.Reject_File.in${AB_METADATA_Table_loader_3_Output_Table_Oracle__table__reject}
fi

if [ X"${AB_VERBOSE_CONDITIONS}" != X"" ]; then
   print -r -- 'Generated graph:'
   mp show
fi
mp run
mpjret=$?
mp reset
m_rmcatalog > /dev/null 2>&1
export XX_CATALOG;XX_CATALOG="${SAVED_CATALOG}"
export AB_CATALOG;AB_CATALOG="${SAVED_CATALOG}"

#+Script End+  ==================== Edits in this section are preserved.



















#+End Script End+  ====================

exit $mpjret
